{
	"name": "utilities",
	"properties": {
		"folder": {
			"name": "Delta/pipelines/includes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "imsparkpool3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "94ce0d85-42e8-405e-9fe1-fb066a84d3af"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/356cc0b4-92be-42c1-8585-6182d784d5eb/resourceGroups/mdwdops-imdmo-dev-rg/providers/Microsoft.Synapse/workspaces/sywsdevimdmo/bigDataPools/imsparkpool3",
				"name": "imsparkpool3",
				"type": "Spark",
				"endpoint": "https://sywsdevimdmo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/imsparkpool3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 4,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.session import SparkSession\n",
					"from urllib.request import urlretrieve\n",
					"import time\n",
					"\n",
					"BASE_URL = \"https://files.training.databricks.com/static/data/health-tracker/\"\n",
					"\n",
					"\n",
					"def retrieve_data(year: int, month: int, raw_path: str, is_late: bool = False) -> bool:\n",
					"    file, dbfsPath, driverPath = _generate_file_handles(year, month, raw_path, is_late)\n",
					"    uri = BASE_URL + file\n",
					"\n",
					"    urlretrieve(uri, file)\n",
					"    mssparkutils.fs.mv(driverPath, dbfsPath)\n",
					"    return True\n",
					"\n",
					"\n",
					"def _generate_file_handles(year: int, month: int, raw_path: str, is_late: bool):\n",
					"    late = \"\"\n",
					"    if is_late:\n",
					"        late = \"_late\"\n",
					"    file = f\"health_tracker_data_{year}_{month}{late}.json\"\n",
					"\n",
					"    dbfsPath = raw_path\n",
					"    if is_late:\n",
					"        dbfsPath += \"late/\"\n",
					"    dbfsPath += file\n",
					"\n",
					"    driverPath = \"abfss://synapsedefaultfs@mdwdopsst2devimdmo.dfs.core.windows.net/synapse/\" + file\n",
					"\n",
					"    return file, dbfsPath, driverPath\n",
					"\n",
					"\n",
					"def stop_all_streams() -> bool:\n",
					"    stopped = False\n",
					"    for stream in spark.streams.active:\n",
					"        stopped = True\n",
					"        stream.stop()\n",
					"    return stopped\n",
					"\n",
					"\n",
					"def stop_named_stream(spark: SparkSession, namedStream: str) -> bool:\n",
					"    stopped = False\n",
					"    for stream in spark.streams.active:\n",
					"        if stream.name == namedStream:\n",
					"            stopped = True\n",
					"            stream.stop()\n",
					"    return stopped\n",
					"\n",
					"\n",
					"def untilStreamIsReady(namedStream: str, progressions: int = 3) -> bool:\n",
					"    queries = list(filter(lambda query: query.name == namedStream, spark.streams.active))\n",
					"    while len(queries) == 0 or len(queries[0].recentProgress) < progressions:\n",
					"        time.sleep(5)\n",
					"        queries = list(filter(lambda query: query.name == namedStream, spark.streams.active))\n",
					"    print(\"The stream {} is active and ready.\".format(namedStream))\n",
					"    return True"
				],
				"execution_count": 1
			}
		]
	}
}