{
	"name": "00_ingest_raw",
	"properties": {
		"folder": {
			"name": "Delta/pipelines"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "imsparkpool3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "56ba4cf3-98fe-4ac4-959a-a2f8486b16bd"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/356cc0b4-92be-42c1-8585-6182d784d5eb/resourceGroups/mdwdops-imdmo-dev-rg/providers/Microsoft.Synapse/workspaces/sywsdevimdmo/bigDataPools/imsparkpool3",
				"name": "imsparkpool3",
				"type": "Spark",
				"endpoint": "https://sywsdevimdmo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/imsparkpool3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 4,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Raw Data Retrieval"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Notebook Objective\n",
					"\n",
					"In this notebook we:\n",
					"\n",
					"1. Ingest data from a remote source into our source directory, `rawPath`."
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Step Configuration\n",
					"\n",
					"Before you run this cell, make sure to add a unique user name to the file\n",
					"`includes/configuration`, e.g.\n",
					"\n",
					"```\n",
					"username = \"yourfirstname_yourlastname\"\n",
					"```"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run Delta/pipelines/includes/configuration"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Introduction to Microsoft Spark Utilities"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.help()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"mssparkutils.fs.rm(rawPath, recurse=True)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Retrieve First Month of Data\n",
					"\n",
					"Next, we use the utility function, `retrieve_data` to retrieve the first file we will ingest. The function takes three arguments:\n",
					"\n",
					"- `year: int`\n",
					"- `month: int`\n",
					"- `rawPath: str`\n",
					"- `is_late: bool` (optional)"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"retrieve_data(2020, 1, rawPath)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Expected File\n",
					"\n",
					"The expected file has the following name:"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"file_2020_1 = \"health_tracker_data_2020_1.json\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Display the Files in the Raw Path"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"display(dbutils.fs.ls(rawPath))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"**Exercise:** Write an Assertion Statement to Verify File Ingestion\n",
					"\n",
					"Note: the `print` statement would typically not be included in production code, nor in code used to test this notebook."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# ANSWER\n",
					"assert file_2020_1 in [\n",
					"    item.name for item in dbutils.fs.ls(rawPath)\n",
					"], \"File not present in Raw Path\"\n",
					"print(\"Assertion passed.\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"%md-sandbox\n",
					"&copy; 2020 Databricks, Inc. All rights reserved.<br/>\n",
					"Apache, Apache Spark, Spark and the Spark logo are trademarks of the <a href=\"http://www.apache.org/\">Apache Software Foundation</a>.<br/>\n",
					"<br/>\n",
					"<a href=\"https://databricks.com/privacy-policy\">Privacy Policy</a> | <a href=\"https://databricks.com/terms-of-use\">Terms of Use</a> | <a href=\"http://help.databricks.com/\">Support</a>"
				],
				"execution_count": null
			}
		]
	}
}