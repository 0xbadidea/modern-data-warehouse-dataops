{
	"name": "00_ingest_raw",
	"properties": {
		"folder": {
			"name": "Delta/pipelines"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "563076dd-82b6-4952-b415-338707d909e0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Raw Data Retrieval"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Notebook Objective\n",
					"\n",
					"In this notebook we:\n",
					"\n",
					"1. Ingest data from a remote source into our source directory, `rawPath`."
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Step Configuration\n",
					"\n",
					"Before you run this cell, make sure to add a unique user name to the file\n",
					"`includes/configuration`, e.g.\n",
					"\n",
					"```\n",
					"username = \"yourfirstname_yourlastname\"\n",
					"```"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run ./includes/configuration"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Make Notebook Idempotent"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"dbutils.fs.rm(rawPath, recurse=True)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Retrieve First Month of Data\n",
					"\n",
					"Next, we use the utility function, `retrieve_data` to retrieve the first file we will ingest. The function takes three arguments:\n",
					"\n",
					"- `year: int`\n",
					"- `month: int`\n",
					"- `rawPath: str`\n",
					"- `is_late: bool` (optional)"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"retrieve_data(2020, 1, rawPath)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Expected File\n",
					"\n",
					"The expected file has the following name:"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"file_2020_1 = \"health_tracker_data_2020_1.json\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Display the Files in the Raw Path"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"display(dbutils.fs.ls(rawPath))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"**Exercise:** Write an Assertion Statement to Verify File Ingestion\n",
					"\n",
					"Note: the `print` statement would typically not be included in production code, nor in code used to test this notebook."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# ANSWER\n",
					"assert file_2020_1 in [\n",
					"    item.name for item in dbutils.fs.ls(rawPath)\n",
					"], \"File not present in Raw Path\"\n",
					"print(\"Assertion passed.\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"%md-sandbox\n",
					"&copy; 2020 Databricks, Inc. All rights reserved.<br/>\n",
					"Apache, Apache Spark, Spark and the Spark logo are trademarks of the <a href=\"http://www.apache.org/\">Apache Software Foundation</a>.<br/>\n",
					"<br/>\n",
					"<a href=\"https://databricks.com/privacy-policy\">Privacy Policy</a> | <a href=\"https://databricks.com/terms-of-use\">Terms of Use</a> | <a href=\"http://help.databricks.com/\">Support</a>"
				],
				"execution_count": null
			}
		]
	}
}